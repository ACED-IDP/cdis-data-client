// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uc-cdis/cdis-data-client/jwt (interfaces: UtilInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	jwt "github.com/uc-cdis/cdis-data-client/jwt"
	http "net/http"
	reflect "reflect"
)

// MockUtilInterface is a mock of UtilInterface interface
type MockUtilInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUtilInterfaceMockRecorder
}

// MockUtilInterfaceMockRecorder is the mock recorder for MockUtilInterface
type MockUtilInterfaceMockRecorder struct {
	mock *MockUtilInterface
}

// NewMockUtilInterface creates a new mock instance
func NewMockUtilInterface(ctrl *gomock.Controller) *MockUtilInterface {
	mock := &MockUtilInterface{ctrl: ctrl}
	mock.recorder = &MockUtilInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUtilInterface) EXPECT() *MockUtilInterfaceMockRecorder {
	return m.recorder
}

// ParseConfig mocks base method
func (m *MockUtilInterface) ParseConfig(arg0 string) jwt.Credential {
	ret := m.ctrl.Call(m, "ParseConfig", arg0)
	ret0, _ := ret[0].(jwt.Credential)
	return ret0
}

// ParseConfig indicates an expected call of ParseConfig
func (mr *MockUtilInterfaceMockRecorder) ParseConfig(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseConfig", reflect.TypeOf((*MockUtilInterface)(nil).ParseConfig), arg0)
}

// ParseKeyValue mocks base method
func (m *MockUtilInterface) ParseKeyValue(arg0, arg1, arg2 string) string {
	ret := m.ctrl.Call(m, "ParseKeyValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// ParseKeyValue indicates an expected call of ParseKeyValue
func (mr *MockUtilInterfaceMockRecorder) ParseKeyValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseKeyValue", reflect.TypeOf((*MockUtilInterface)(nil).ParseKeyValue), arg0, arg1, arg2)
}

// ResponseToBytes mocks base method
func (m *MockUtilInterface) ResponseToBytes(arg0 *http.Response) []byte {
	ret := m.ctrl.Call(m, "ResponseToBytes", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ResponseToBytes indicates an expected call of ResponseToBytes
func (mr *MockUtilInterfaceMockRecorder) ResponseToBytes(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseToBytes", reflect.TypeOf((*MockUtilInterface)(nil).ResponseToBytes), arg0)
}

// ResponseToString mocks base method
func (m *MockUtilInterface) ResponseToString(arg0 *http.Response) string {
	ret := m.ctrl.Call(m, "ResponseToString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ResponseToString indicates an expected call of ResponseToString
func (mr *MockUtilInterfaceMockRecorder) ResponseToString(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseToString", reflect.TypeOf((*MockUtilInterface)(nil).ResponseToString), arg0)
}

// TryReadFile mocks base method
func (m *MockUtilInterface) TryReadFile(arg0 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "TryReadFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryReadFile indicates an expected call of TryReadFile
func (mr *MockUtilInterfaceMockRecorder) TryReadFile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryReadFile", reflect.TypeOf((*MockUtilInterface)(nil).TryReadFile), arg0)
}
